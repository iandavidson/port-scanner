import java.time.LocalDateTime

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'com.ian.davidson'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	//log
	implementation 'org.slf4j:slf4j-api:2.0.13'
	implementation 'ch.qos.logback:logback-core:1.5.6'
	implementation 'ch.qos.logback:logback-classic:1.5.6'

	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	//spring related
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//convenience
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'

	//infra
	implementation 'com.rabbitmq:amqp-client:5.21.0'
	implementation 'org.postgresql:postgresql'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
}

jib() {
	from {
		image = 'amazoncorretto:17.0.7-alpine'
		platforms {
			platform {
				architecture = 'arm64'
				os = 'linux'
			}
		}
	}
	to {
		image = project.name.toString()
		tags = ["latest", LocalDateTime.now().format("yyyyMMdd-HHmmss")]
	}
	container {
		labels = [maintainer: 'Ian Davidson']
		creationTime = 'USE_CURRENT_TIMESTAMP'
		args = ["--spring.profiles.active=container"]
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
